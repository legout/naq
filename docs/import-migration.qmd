---
title: "Import Migration Guide"
---

## Overview

NAQ 0.2.0 introduces a new modular structure while maintaining full backward compatibility. All existing imports continue to work without modification, and new modular imports are available for improved organization.

## Backward Compatibility

**All existing imports continue to work unchanged:**

```python
# Main functionality - STILL WORKS
from naq import Queue, Worker, Job, enqueue, enqueue_sync

# Models and types - STILL WORKS  
from naq.models import JOB_STATUS, JobEvent, JobResult

# Event logging - STILL WORKS
from naq.events import AsyncJobEventLogger

# Configuration - STILL WORKS
from naq import get_config, DEFAULT_NATS_URL
```

## New Modular Structure (Optional)

For new code, you can use the new modular structure for better organization:

### Models by Category

```python
# Job models
from naq.models.jobs import Job, JobResult

# Status and event enums
from naq.models.enums import JOB_STATUS, JobEventType, WorkerEventType

# Event models
from naq.models.events import JobEvent, WorkerEvent

# Schedule models
from naq.models.schedules import Schedule
```

### Services (New)

```python
# Service layer for advanced usage
from naq.services import JobService, EventService, ServiceManager

# Create service manager
from naq.services import create_service_manager_from_config
```

### Utilities (New)

```python
# Decorators
from naq.utils.decorators import retry, timing, log_errors

# Context managers
from naq.utils.context_managers import managed_resource, timeout_context

# Async helpers
from naq.utils.async_helpers import gather_with_concurrency, retry_async

# Error handling
from naq.utils.error_handling import ErrorHandler, wrap_naq_exception

# Structured logging
from naq.utils.logging import StructuredLogger, setup_structured_logging
```

### Configuration (Enhanced)

```python
# Enhanced configuration system
from naq.config import load_config, get_config, reload_config

# Configuration validation
from naq.config import validate_config_file

# Configuration types
from naq.config.types import NAQConfig
```

## Import Equivalence

Old and new imports refer to the same objects:

```python
# These are identical
from naq import Job as LegacyJob
from naq.models.jobs import Job as NewJob
assert LegacyJob is NewJob  # True

# These are identical
from naq.models import JOB_STATUS as LegacyStatus
from naq.models.enums import JOB_STATUS as NewStatus
assert LegacyStatus is NewStatus  # True
```

## Migration Recommendations

### For Existing Projects
- **No changes needed** - all existing code continues to work
- Consider migrating imports gradually over time
- Use new modular imports for new features

### For New Projects
- Use new modular imports for better organization
- Take advantage of new service layer for complex applications
- Use enhanced configuration system

### For Large Codebases
- Migrate imports gradually, module by module
- Use both old and new imports during transition
- Test thoroughly after each migration step

## Quick Reference

| Component | Legacy Import | New Import |
|-----------|---------------|------------|
| Job | `from naq import Job` | `from naq.models.jobs import Job` |
| JOB_STATUS | `from naq.models import JOB_STATUS` | `from naq.models.enums import JOB_STATUS` |
| Queue | `from naq import Queue` | `from naq.queue.core import Queue` |
| Worker | `from naq import Worker` | `from naq.worker.core import Worker` |
| enqueue | `from naq import enqueue` | `from naq.queue.async_api import enqueue` |
| JobEvent | `from naq.models import JobEvent` | `from naq.models.events import JobEvent` |
| AsyncJobEventLogger | `from naq.events import AsyncJobEventLogger` | `from naq.events.logger import AsyncJobEventLogger` |

## Benefits of New Structure

### Better Organization
- Related functionality grouped into focused modules
- Clear separation between models, services, and utilities
- Easier to understand and maintain

### Enhanced Functionality
- Service layer for dependency injection and centralized operations
- Comprehensive utility functions with clear categorization
- Enhanced configuration system with validation

### Future-Proof
- Modular structure supports future extensions
- Clear API boundaries for plugin development
- Better type hints and IDE support

## Migration Examples

### Before (Legacy)
```python
from naq import enqueue_sync, Worker, JOB_STATUS
from naq.models import Job, JobEvent
from naq.events import AsyncJobEventLogger

def process_job():
    job = enqueue_sync(my_task, arg1, arg2)
    worker = Worker(['default'])
    logger = AsyncJobEventLogger()
    return job
```

### After (New Modular - Optional)
```python
from naq.queue.sync_api import enqueue_sync
from naq.worker.core import Worker
from naq.models.enums import JOB_STATUS
from naq.models.jobs import Job
from naq.models.events import JobEvent
from naq.events.logger import AsyncJobEventLogger

def process_job():
    job = enqueue_sync(my_task, arg1, arg2)
    worker = Worker(['default'])
    logger = AsyncJobEventLogger()
    return job
```

Both approaches work identically - choose based on your preferences and project needs.