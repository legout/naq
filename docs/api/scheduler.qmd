---
title: "Scheduler API"
---

The `scheduler` module contains the `Scheduler` class, which is responsible for finding and enqueuing scheduled and recurring jobs.

## `naq.scheduler.Scheduler`

You typically run the scheduler from the command line using `naq scheduler`, but you can also create and run a `Scheduler` instance programmatically.

### `naq.scheduler.Scheduler(nats_url, poll_interval, instance_id, enable_ha)`

| Parameter       | Type                | Description                                                                                             |
| --------------- | ------------------- | ------------------------------------------------------------------------------------------------------- |
| `nats_url`      | `str`               | The URL of the NATS server.                                                                             |
| `poll_interval` | `float`             | The interval (in seconds) at which the scheduler checks for due jobs. Defaults to `1.0`.                  |
| `instance_id`   | `str` &#124; `None` | A unique ID for the scheduler instance, used for High Availability. A unique ID is generated if not provided. |
| `enable_ha`     | `bool`              | Whether to enable High Availability (HA) mode with leader election. Defaults to `True`.                  |

### Methods

#### `run()`

Starts the scheduler's main processing loop. This is an `async` method.

```python
async def run(self) -> None
```

The scheduler will connect to NATS and, if it becomes the leader (or if HA is disabled), it will start polling for jobs that are ready to be enqueued.

### High Availability (HA)

When `enable_ha` is `True`, you can run multiple `Scheduler` instances for redundancy. They will use a leader election protocol built on a NATS KV store to ensure that only one instance is actively scheduling jobs at any given time. If the leader instance goes down, another instance will automatically take over.