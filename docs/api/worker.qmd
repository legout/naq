---
title: "Worker API"
---

The `worker` module contains the `Worker` class, which is responsible for fetching and executing jobs from one or more queues.

## `naq.worker.Worker`

You can start a worker from the command line using `naq worker`, but you can also create and run a `Worker` instance programmatically.

### `naq.worker.Worker(queues, nats_url, concurrency, worker_name, ...)`

| Parameter            | Type                               | Description                                                                                             |
| -------------------- | ---------------------------------- | ------------------------------------------------------------------------------------------------------- |
| `queues`             | `list[str]` &#124; `str`            | A list of queue names to listen to. Defaults to the single `naq_default_queue`.                         |
| `nats_url`           | `str`                              | The URL of the NATS server.                                                                             |
| `concurrency`        | `int`                              | The maximum number of jobs to process concurrently. Defaults to `10`.                                     |
| `worker_name`        | `str` &#124; `None`                 | A name for the worker, used for creating durable consumer names. A unique ID is generated if not provided. |
| `heartbeat_interval` | `int`                              | The interval (in seconds) at which the worker sends a heartbeat. Defaults to `15`.                      |
| `worker_ttl`         | `int`                              | The time-to-live (in seconds) for the worker's heartbeat. Defaults to `60`.                             |
| `ack_wait`           | `int` &#124; `dict` &#124; `None`   | The time (in seconds) the worker has to acknowledge a job before it's re-delivered. Can be a global value or a per-queue dictionary. |
| `module_paths`       | `list[str]` &#124; `str` &#124; `None` | A list of paths to add to `sys.path` to help the worker find your task modules.                       |

### Methods

#### `run()`

Starts the worker's main processing loop. This is an `async` method.

```python
async def run(self) -> None
```

The worker will connect to NATS, subscribe to the specified queues, and start fetching jobs. It will run until a shutdown signal is received.

#### `run_sync()`

A synchronous method to start the worker. This is useful when running a worker from a synchronous script.

```python
def run_sync(self) -> None
```

This method will block until the worker is shut down.

#### `list_workers()`

A static method to list all active workers.

```python
@staticmethod
async def list_workers(nats_url: str = DEFAULT_NATS_URL) -> list[dict]
```

Returns a list of dictionaries, where each dictionary contains information about a worker (ID, status, hostname, etc.).

#### `list_workers_sync()`

A synchronous version of `list_workers()`.