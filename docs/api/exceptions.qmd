---
title: "Exceptions"
---

The `naq` library uses a set of custom exceptions to indicate specific error conditions. All custom exceptions inherit from the base `NaqException`.

### `NaqException`

The base exception for all errors raised by `naq`.

### `NaqConnectionError`

Raised when there is an issue connecting to the NATS server or a problem with the connection during an operation.

### `ConfigurationError`

Raised when there is an issue with the configuration of `naq`, such as providing invalid parameters to a `Queue` or `Worker`.

### `SerializationError`

Raised if `naq` fails to serialize or deserialize a job. This can happen if you are using the `json` serializer and try to enqueue a job with un-serializable arguments (like complex objects).

### `JobExecutionError`

Raised by `Job.fetch_result()` if the job failed during execution on the worker. The exception message will contain the original error and traceback from the worker.

### `JobNotFoundError`

Raised by `Job.fetch_result()` if the result for the specified `job_id` cannot be found. This could be because the job has not completed yet, the result has expired and been cleaned up, or the job never existed.