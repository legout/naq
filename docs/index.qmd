---
title: "NAQ - NATS Asynchronous Queue"
---

[![PyPI version](https://badge.fury.io/py/naq.svg)](https://badge.fury.io/py/naq)
[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/legout/naq/blob/main/LICENSE)
[![Python version](https://img.shields.io/badge/python-3.12%2B-blue.svg)](https://www.python.org/downloads/release/python-3120/)

**NAQ** is a simple, asynchronous job queueing library for Python, inspired by [RQ (Redis Queue)](https://python-rq.org/), but built entirely on top of [NATS](https://nats.io/) and its JetStream persistence layer.

It allows you to easily enqueue Python functions to be executed asynchronously by worker processes, leveraging the power and resilience of NATS JetStream for message persistence and delivery.

## Get Started

Ready to dive in? Check out the [**Quickstart Guide**](quickstart.qmd) to get your first worker up and running in minutes.

### New in Version 0.2.0

NAQ 0.2.0 introduces a **new modular structure** with complete backward compatibility:
- All existing imports continue to work unchanged
- New modular imports available for better organization
- Enhanced service layer for advanced use cases
- See the [**Import Migration Guide**](import-migration.qmd) for details

## What Makes NAQ Different

NAQ isn't just another task queue - it's a **complete event-driven job processing platform** built on NATS. Every state change, from job enqueue to worker heartbeats, is captured as a structured event and stored in durable streams.

**See your jobs in action:**
```bash
# Watch jobs being processed in real-time  
naq events

# Monitor worker status and health
naq worker-events

# Analyze job performance and history
naq event-history job-abc-123
```

This event-driven approach gives you unprecedented visibility into your job processing pipeline, making debugging, monitoring, and scaling dramatically easier.

## Key Features

*   **Simple API**: Familiar and easy-to-use API, similar to RQ.
*   **Asynchronous Core**: Built with `asyncio` and `nats-py` for high performance.
*   **Persistent & Reliable**: Uses NATS JetStream for robust job persistence and guaranteed delivery.
*   **Event-Driven State Management**: Complete observability with real-time job, worker, and schedule event streaming.
*   **Comprehensive Monitoring**: Live monitoring of job lifecycle, worker status, and system health with rich CLI tools.
*   **Scheduled & Recurring Jobs**: Supports cron-style, interval-based, and one-time scheduled tasks with full event tracking.
*   **Job Dependencies**: Create complex workflows by defining dependencies between jobs.
*   **Automatic Retries**: Configurable retry mechanism with exponential backoff for failed jobs.
*   **Worker Status Tracking**: Real-time worker heartbeats, status changes, and performance monitoring.
*   **Schedule Management**: Full lifecycle management of scheduled jobs with pause, resume, modify, and cancel operations.
*   **Historical Analysis**: Query job event history for debugging, analytics, and compliance.
*   **Production-Ready Monitoring**: Built-in alerting, metrics collection, and integration with monitoring systems.
*   **Powerful CLI**: Comprehensive command-line interface with real-time monitoring, event history, and system analytics.